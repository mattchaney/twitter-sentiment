provider:
  name: aws
  iamRoleStatements:
   iamRoleStatements: # TODO refine to least privilege per function
    - Effect: Allow
      Action:
        - states:StartExecution
        - states:DescribeExecution
        - states:GetActivityTask
        - states:SendTaskSuccess
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
        - s3:PutObjectAcl
        - s3:GetObjectAcl
        - s3:ListBucket
        - s3:ListAllMyBuckets
        - s3:GetBucketLocation
        - lambda:InvokeFunction
      Resource: 'arn:aws:*:us-east-1:*:*'

functions:
  create_state_machine:
    
  open_connection:
    
  send_message_to_client:

  get_activity_status:

  twitter_sentiment:

stepFunctions:
  stateMachine:
  {
  "Comment": "PollToPushStateMachine",
  "StartAt": "RunAthenaQuery",
  "States": {
            "RunAthenaQuery": {
            "Type": "Task",
            "Resource":"arn:aws:lambda:us-east-1:796187004613:function:PollToPush-QueryAthena",
            "Next" : "IssueCallback"
            },
             "IssueCallback": {
              "Type": "Task",
              "Parameters": {
                "myArn.$":"$$.Execution.Id",
                "myPayload.$":"$"
              },
              "Resource":"arn:aws:lambda:us-east-1:796187004613:function:SendMessageToClient",
              "Retry": [
                {
              "ErrorEquals": ["DynamoRecordDoesNotExist"],
              "IntervalSeconds": 5,
              "MaxAttempts": 5,
              "BackoffRate": 2.0
            }
              ],
              "End":true
            }
  }
}

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
